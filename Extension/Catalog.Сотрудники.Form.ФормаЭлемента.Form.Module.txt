
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ЮТР_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьВыполнениеПослеОбработчиковСобытия("ЮТР_ПриСозданииНаСервереПосле", Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ЮТР_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка, ДополнительныйПараметр)
	
	//ЮТР начало изменения 
	//{32 560}, 13.05.2015
	//На форму добавлена возможность вносить производственную единицу с сохранением в регистр сведений ЮТР_ПериодическиеДанныеСотрудника
	СотрудникиФормы.ПрочитатьДанныеИзХранилищаВФорму(
		ЭтаФорма,
		СотрудникиКлиентСервер.ОписаниеДополнительнойФормы(ИмяФормы),
		ЮТР_АдресДанныхДополнительнойФормыНаСервере(СотрудникиКлиентСервер.ОписаниеДополнительнойФормы(ИмяФормы)));
	ЮТР_ПроинициализироватьФорму();
	//ЮТР окончание изменения

КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	//ЮТР начало изменения 
	//{32 560}, 13.05.2015
	//На форму добавлена возможность вносить производственную единицу с сохранением в регистр сведений ЮТР_ПериодическиеДанныеСотрудника
	ЮТР_ЗакрытьПослеЗаписи = Истина;
	//ЮТР окончание изменения


КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	УстановитьВыполнениеПослеОбработчиковСобытия("ЮТР_ОбработкаОповещенияПосле", Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ОбработкаОповещенияПосле(ИмяСобытия, Параметр, Источник, ДополнительныйПараметр)
	
	//ЮТР начало изменения 
	//{32 560}, 13.05.2015
	//На форму добавлена возможность вносить производственную единицу с сохранением в регистр сведений ЮТР_ПериодическиеДанныеСотрудника
	Если ИмяСобытия = "ОтредактированаИстория" И Сотрудник.Ссылка = Источник Тогда
		
		Если Параметр.ИмяРегистра = "ЮТР_ПериодическиеДанныеСотрудника" Тогда
			Если ЮТР_ПериодическиеДанныеСотрудникаНаборЗаписейПрочитан Тогда
				РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(
					ЭтаФорма,
					Сотрудник.Ссылка,
					ИмяСобытия,
					Параметр,
					Источник);
				КонецЕсли;
				ЮТР_ОбновитьПолеПроизводственнаяЕдиницаПериод(ЭтаФорма, ОбщегоНазначенияКлиент.ДатаСеанса());
		КонецЕсли;
				
	КонецЕсли;
	//ЮТР окончание изменения
	
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УстановитьВыполнениеПослеОбработчиковСобытия("ЮТР_ПередЗаписьюПосле", Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ПередЗаписьюПосле(Отказ, ПараметрыЗаписи, ДополнительныйПараметр)
	
	
	//ЮТР начало изменения 
	//{32 560}, 13.05.2015
	//На форму добавлена возможность вносить производственную единицу с сохранением в регистр сведений ЮТР_ПериодическиеДанныеСотрудника
	ЮТР_ЗапроситьРежимИзмененияПроизводственнойЕдиницы(ЮТР_ПроизводственнаяЕдиницаПериод, Отказ);
	//ЮТР окончание изменения

КонецПроцедуры

&НаСервере
Процедура ЮТР_ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	УстановитьВыполнениеПослеОбработчиковСобытия("ЮТР_ОбработкаПроверкиЗаполненияНаСервереПосле", Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ЮТР_ОбработкаПроверкиЗаполненияНаСервереПосле(Отказ, ПроверяемыеРеквизиты, ДополнительныйПараметр)
	
	//ЮТР начало изменения 
	//{32 560}, 13.05.2015
	//На форму добавлена возможность вносить производственную единицу с сохранением в регистр сведений ЮТР_ПериодическиеДанныеСотрудника
	
	СтруктураВедущихОбъектов = Новый Структура();
	СтруктураВедущихОбъектов.Вставить("Сотрудник", Сотрудник.Ссылка);
	СтруктураВедущихОбъектов.Вставить("Идентификатор","ПроизводственнаяЕдиница"); 
	
	РедактированиеПериодическихСведений.ПроверитьЗаписьВФормеПоСтруктуре(ЭтаФорма, "ЮТР_ПериодическиеДанныеСотрудника", СтруктураВедущихОбъектов, Отказ);

	//ЮТР окончание изменения

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЮТР_КомандаЗаписатьИЗакрыть(Команда)
	
	//ЮТР начало изменения 
	//{32 560}, 13.05.2015
	//На форму добавлена возможность вносить производственную единицу с сохранением в регистр сведений ЮТР_ПериодическиеДанныеСотрудника
	
	ЮТР_ЗакрытьПослеЗаписи = Истина;
	//ЮТР окончание изменения

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭлементовФормы

//ЮТР начало изменения 
//32 775, 13.03.2015
// Добавление истории способа расчета аванса

&НаКлиенте
Процедура ЮТР_ИсторияСпособаРасчетаАванса(Команда)
	
	Отбор = Новый Структура("Сотрудник", СотрудникСсылка);
	пФорма = ПолучитьФорму("РегистрСведений.ПлановыеАвансы.ФормаСписка", Новый Структура("Отбор", Отбор), ЭтаФорма); 
	пФорма.Открыть();
	
КонецПроцедуры

//ЮТР окончание изменения

&НаКлиенте
Процедура ЮТР_ПребываниеЗаГраницей(Команда)
	
	ОписаниеФормы = СотрудникиКлиентСервер.ОбщееОписаниеДополнительнойФормы("РегистрСведений.ЮТР_ПребываниеЗаГраницей.Форма.ПериодыПребыванияЗаГраницей");
	
	ОписаниеФормы.КлючевыеРеквизиты.Вставить("СотрудникСсылка");
	ОписаниеФормы.КлючевыеРеквизиты.Вставить("ФизическоеЛицоСсылка");
	ОписаниеФормы.КлючевыеРеквизиты.Вставить("ГоловнаяОрганизация", "Сотрудник.ГоловнаяОрганизация");
	ОписаниеФормы.КлючевыеРеквизиты.Вставить("ТекущаяОрганизация");
	ОписаниеФормы.КлючевыеРеквизиты.Вставить("Заголовок", "Сотрудник.Наименование");
	
	СотрудникиКлиент.ОткрытьДополнительнуюФорму(ОписаниеФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ПериодическиеДанныеСотрудникаЗначениеПриИзменении(Элемент)
	
	ЮТР_ОбновитьПолеПроизводственнаяЕдиницаПериод(ЭтаФорма, ОбщегоНазначенияКлиент.ДатаСеанса());
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ПроизводственнаяЕдиницаПериодПриИзменении(Элемент)
	
	ЮТР_ПериодическиеДанныеСотрудника.Период = ЮТР_ПроизводственнаяЕдиницаПериод;
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ПериодическиеДанныеСотрудникаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элементы.ЮТР_ПериодическиеДанныеСотрудникаЗначение.ВыбиратьТип = Ложь;
	Элементы.ЮТР_ПериодическиеДанныеСотрудникаЗначение.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ЮТР_ПроизводственныеЕдиницы");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//ЮТР начало изменения 
//{32 560}, 13.05.2015
//На форму добавлена возможность вносить производственную единицу с сохранением в регистр сведений ЮТР_ПериодическиеДанныеСотрудника

&НаСервере
Процедура ЮТР_ПроинициализироватьФорму()
	
	Если ЮТР_ПериодическиеДанныеСотрудникаПрежняя = Неопределено Тогда
	
		СтруктураВедущихОбъектов = Новый Структура();
		СтруктураВедущихОбъектов.Вставить("Сотрудник", Сотрудник.Ссылка);
		СтруктураВедущихОбъектов.Вставить("Идентификатор", "ПроизводственнаяЕдиница");
		
		РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФормеПоСтруктуре(ЭтаФорма, "ЮТР_ПериодическиеДанныеСотрудника", СтруктураВедущихОбъектов);

	КонецЕсли;
	
	ЮТР_ОбновитьПолеПроизводственнаяЕдиницаПериод(ЭтаФорма, ТекущаяДатаСеанса());
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЮТР_ОбновитьПолеПроизводственнаяЕдиницаПериод(Форма, ДатаСеанса)
	
	Если НЕ ЗначениеЗаполнено(Форма.ЮТР_ПериодическиеДанныеСотрудника.Значение) И НЕ ЗначениеЗаполнено(Форма.ЮТР_ПериодическиеДанныеСотрудника.Период) Тогда
		Форма.ЮТР_ПериодическиеДанныеСотрудника.Период = '00010101';			
	ИначеЕсли ЗначениеЗаполнено(Форма.ЮТР_ПериодическиеДанныеСотрудника.Значение) И НЕ ЗначениеЗаполнено(Форма.ЮТР_ПериодическиеДанныеСотрудника.Период) Тогда
		Форма.ЮТР_ПериодическиеДанныеСотрудника.Период = НачалоДня(ДатаСеанса);
	КонецЕсли;
	
	Форма.ЮТР_ПроизводственнаяЕдиницаПериод = Форма.ЮТР_ПериодическиеДанныеСотрудника.Период;
		
КонецПроцедуры

&НаСервере
Функция ЮТР_АдресДанныхДополнительнойФормыНаСервере(ОписаниеДополнительнойФормы)
	
	Возврат СотрудникиФормы.АдресДанныхДополнительнойФормы(ОписаниеДополнительнойФормы, ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ЮТР_ЗапроситьРежимИзмененияПроизводственнойЕдиницы(ДатаИзменения, Отказ)
	
	Оповещение = Новый ОписаниеОповещения("ЮТР_ЗапроситьРежимИзмененияПроизводственнойЕдиницыЗавершение", ЭтотОбъект);
	
	ТекстКнопкиДа = НСтр("ru = 'Изменилась производственная единица'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru =  'При редактировании изменилась производственная единица. 
						|Если просто исправлены прежние данные (они были ошибочны), нажмите ""Исправлена ошибка"".
						|Если изменилась производственная единица %1, нажмите ""Производственная единица""'"), 
			Формат(ДатаИзменения, "ДФ='д ММММ гггг ""г""'"));
			
	ЮТР_ПериодическиеДанныеСотрудникаНоваяЗапись = Истина;	

	РедактированиеПериодическихСведенийКлиент.ЗапроситьРежимИзмененияРегистра(ЭтаФорма, "ЮТР_ПериодическиеДанныеСотрудника", ТекстВопроса, ТекстКнопкиДа, Отказ, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ЗапроситьРежимИзмененияПроизводственнойЕдиницыЗавершение(Отказ, ОповещениеЗавершения) Экспорт
	
	Если Не Отказ Тогда
		
		Если ПроверитьЗаполнение() Тогда
			
			ВозвращаемыйПараметр = Новый Структура;
			ВозвращаемыйПараметр.Вставить("ИмяФормы", ИмяФормы);
			ВозвращаемыйПараметр.Вставить("АдресВХранилище", ЮТР_АдресДанныхДополнительнойФормыНаСервере(СотрудникиКлиентСервер.ОписаниеДополнительнойФормы(ИмяФормы)));
			
			Оповестить(
			"ИзмененыДанныеДополнительнойФормы",
			ВозвращаемыйПараметр,
			ЭтаФорма);
			
			Если ЮТР_ЗакрытьПослеЗаписи Тогда
				ЮТР_ПериодическиеДанныеСотрудникаНоваяЗапись = Истина;	
			КонецЕсли;
			
			ЮТР_ЗаписатьПроизводственнуюЕдиницуВРегистр();
			
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЮТР_ЗаписатьПроизводственнуюЕдиницуВРегистр()
		
	СтруктураВедущихОбъектов = Новый Структура();
	СтруктураВедущихОбъектов.Вставить("Сотрудник", Сотрудник.Ссылка);
	СтруктураВедущихОбъектов.Вставить("Идентификатор", "ПроизводственнаяЕдиница");
	
	
	Если ЮТР_ПериодическиеДанныеСотрудникаНаборЗаписейПрочитан Тогда
		РедактированиеПериодическихСведений.ЗаписатьНаборЗаписейПослеРедактированияВФормеПоСтруктуре(ЭтаФорма, "ЮТР_ПериодическиеДанныеСотрудника", СтруктураВедущихОбъектов, "", Неопределено);
	КонецЕсли;
	
	РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФормеПоСтруктуре(ЭтаФорма, "ЮТР_ПериодическиеДанныеСотрудника", СтруктураВедущихОбъектов, "", Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ИсторияИзмененияПроизводственнойЕдиницы(Команда)
	
	ТолькоПросмотрИстории = ЭтаФорма.ТолькоПросмотр;
	Если Не ТолькоПросмотрИстории Тогда
		Попытка
			ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
			ТолькоПросмотрИстории = Ложь;
		Исключение
			ТолькоПросмотрИстории = Истина;
		КонецПопытки
	КонецЕсли; 

	ПараметрыФормы = Новый Структура("Объект, Идентификатор");
	ПараметрыФормы.Объект = Сотрудник.Ссылка;
	ПараметрыФормы.Идентификатор = "ПроизводственнаяЕдиница";
	
	МассивЗаписей = РедактированиеПериодическихСведенийКлиентСервер.МассивЗаписейИстории(ЭтаФорма, "ЮТР_ПериодическиеДанныеСотрудника", Сотрудник.Ссылка);
	ПараметрыФормы = Новый Структура("МассивЗаписей,ВедущийОбъект,ТолькоПросмотр", МассивЗаписей, Сотрудник.Ссылка, ТолькоПросмотрИстории);
	ОткрытьФорму("РегистрСведений.ЮТР_ПериодическиеДанныеСотрудника.Форма.ИсторияРедактирования", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

//ЮТР окончание изменения

#КонецОбласти