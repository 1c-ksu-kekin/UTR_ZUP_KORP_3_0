#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ЮТР_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	      УстановитьВыполнениеПослеОбработчиковСобытия("ЮТР_ПриСозданииНаСервереПосле", Неопределено);
КонецПроцедуры

&НаСервере
Процедура ЮТР_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка, ДополнительныйПараметр)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЮТР_ЗаполнитьДанныеФормыПоОрганизации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЮТР_ПриЧтенииНаСервере(ТекущийОбъект)
	УстановитьВыполнениеПослеОбработчиковСобытия("ЮТР_ПриЧтенииНаСервереПосле", Неопределено);
КонецПроцедуры

&НаСервере
Процедура ЮТР_ПриЧтенииНаСервереПосле(ТекущийОбъект, ДополнительныйПараметр)
	ЮТР_ЗаполнитьДополнительныеДанные();
КонецПроцедуры

//&НаСервере
//Процедура ЮТР_ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
//	УстановитьВыполнениеПослеОбработчиковСобытия("ЮТР_ПередЗаписьюНаСервереПосле", Неопределено);
//КонецПроцедуры

//&НаСервере
//Процедура ЮТР_ПередЗаписьюНаСервереПосле(Отказ, ТекущийОбъект, ПараметрыЗаписи, ДополнительныйПараметр)
//	
//	//Заполнение дополнительных данных сотрудников по данным, введенным в таблицу показателей.	
//	ТекущийОбъект.ЮТР_ДополнительныеДанные.Очистить();
//	
//	Для каждого ПоказателиСотрудника Из ЭтаФорма.ПоказателиСотрудников Цикл
//		СтрокаДанных 				= ТекущийОбъект.ЮТР_ДополнительныеДанные.Добавить();
//		СтрокаДанных.Сотрудник 		= ПоказателиСотрудника.Сотрудник;
//		СтрокаДанных.ДатаЗаявления 	= ПоказателиСотрудника.ЮТР_ДатаЗаявления;
//		СтрокаДанных.Основание 		= ПоказателиСотрудника.ЮТР_Основание;
//	КонецЦикла;
//	
//КонецПроцедуры

&НаСервере
Процедура ЮТР_ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьВыполнениеПослеОбработчиковСобытия("ЮТР_ПослеЗаписиНаСервереПосле", Неопределено);
КонецПроцедуры

&НаСервере
Процедура ЮТР_ПослеЗаписиНаСервереПосле(ТекущийОбъект, ПараметрыЗаписи, ДополнительныйПараметр)
	ЮТР_ЗаполнитьДополнительныеДанные();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЮТР_ПоказателиСотрудниковСотрудникПриИзменении(Элемент)
	УстановитьВыполнениеПослеОбработчиковСобытия("ЮТР_ПоказателиСотрудниковСотрудникПриИзмененииПосле", Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ПоказателиСотрудниковСотрудникПриИзмененииПосле(Элемент, ДополнительныйПараметр)
	
	ЮТР_ЗаполнитьОснования();
	
	ЮТР_ЗаполнитьДополнительныеДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ПоказателиСотрудниковОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УстановитьВыполнениеПослеОбработчиковСобытия("ЮТР_ПоказателиСотрудниковОбработкаВыбораПосле", Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ПоказателиСотрудниковОбработкаВыбораПосле(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ДополнительныйПараметр)
	
	ЮТР_ЗаполнитьОснования();
	
	ЮТР_ЗаполнитьДополнительныеДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ПоказателиСотрудниковПослеУдаления(Элемент)
	УстановитьВыполнениеПослеОбработчиковСобытия("ЮТР_ПоказателиСотрудниковПослеУдаленияПосле", УдаляемыеСотрудники);
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ПоказателиСотрудниковПослеУдаленияПосле(Элемент, УдаляемыеСотрудники)
	
	Для каждого УдаляемыйСотрудник Из УдаляемыеСотрудники Цикл
		
		МассивСтрок = Объект.ЮТР_ДополнительныеДанные.НайтиСтроки(Новый Структура("Сотрудник", УдаляемыйСотрудник));
		
		Для каждого УдаляемаяСтрока Из МассивСтрок Цикл
			Объект.ЮТР_ДополнительныеДанные.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
	ЮТР_ЗаполнитьДополнительныеДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ОрганизацияПриИзменении(Элемент)
	УстановитьВыполнениеПослеОбработчиковСобытия("ЮТР_ОрганизацияПриИзмененииПосле", Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ОрганизацияПриИзмененииПосле(Элемент, ДополнительныйПараметр)
	ЮТР_ЗаполнитьДанныеФормыПоОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ПоказателиСотрудниковЮТР_ДатаЗаявленияПриИзменении(Элемент)
	ЮТР_ЗаписатьДанныеСтроки("ДатаЗаявления");
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ПоказателиСотрудниковЮТР_ОснованиеПриИзменении(Элемент)
	ЮТР_ЗаписатьДанныеСтроки("Основание");
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	УстановитьВыполнениеПослеОбработчиковСобытия("ЮТР_ОбработкаОповещенияПосле", Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ОбработкаОповещенияПосле(ИмяСобытия, Параметр, Источник, ДополнительныйПараметр)
	
	Если Источник = ЭтаФорма Тогда
		
		Если ИмяСобытия = "ИзмененыНачисления" И Источник = ЭтаФорма Тогда 			
			           
			ИзменениеВКолонкеНачисление = ТекущийСотрудник;
			ЮТР_ЗаполнитьДополнительныеДанные();
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЮТР_ПоказателиСотрудниковПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ПоказателиСотрудников.ТекущиеДанные;
    Если ТекущиеДанные <> Неопределено Тогда
	     ТекущийСотрудник =  ТекущиеДанные.Сотрудник
	КонецЕсли;	 
	
КонецПроцедуры  



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЮТР_ЗаполнитьДанныеФормыПоОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.ЮТР_Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ЮТР_ДолжностьРуководителя");
	
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));	
	
КонецПроцедуры

&НаСервере
Процедура ЮТР_ЗаполнитьДополнительныеДанные() 
		
	Для каждого СтрокаДополнительныхДанных Из Объект.ЮТР_ДополнительныеДанные Цикл

	            МассивСтрокПоказателей = ЭтаФорма.ПоказателиСотрудников.НайтиСтроки(Новый Структура("Сотрудник", СтрокаДополнительныхДанных.Сотрудник)); 	
				
				Если МассивСтрокПоказателей.Количество()>0 Тогда
					
					СтрокаПоказателя					= МассивСтрокПоказателей[0];
					СтрокаПоказателя.ЮТР_ДатаЗаявления	= СтрокаДополнительныхДанных.ДатаЗаявления;
					Если  ИзменениеВКолонкеНачисление = СтрокаДополнительныхДанных.Сотрудник Тогда
						  СтрокаДополнительныхДанных.Основание  = "выписка из протокола ВЛЭК от «___»__________20__г."; 
						  ИзменениеВКолонкеНачисление = "";
					КонецЕсли;
					СтрокаПоказателя.ЮТР_Основание	=     СтрокаДополнительныхДанных.Основание; 				
			
				КонецЕсли;
	КонецЦикла;   	
	
КонецПроцедуры

&НаСервере
Процедура ЮТР_ЗаполнитьОснования()
	
	
			
		Для каждого ПоказателиСотрудника Из ЭтаФорма.ПоказателиСотрудников Цикл
			
			МассивСтрок = ЭтаФорма.Объект.ЮТР_ДополнительныеДанные.НайтиСтроки(Новый Структура("Сотрудник", ПоказателиСотрудника.Сотрудник));
			
			Если МассивСтрок.Количество() = 0 Тогда
				
				НоваяСтрока				= ЭтаФорма.Объект.ЮТР_ДополнительныеДанные.Добавить();
				НоваяСтрока.Сотрудник	= ПоказателиСотрудника.Сотрудник;
											
			КонецЕсли;
			
		КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ЗаписатьДанныеСтроки(ИмяРеквизита)
	
	ТекущиеДанные = Элементы.ПоказателиСотрудников.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		СтрокиДляИзменения = Объект.ЮТР_ДополнительныеДанные.НайтиСтроки(Новый Структура("Сотрудник", ТекущиеДанные.Сотрудник));
		Если СтрокиДляИзменения.Количество() > 0 Тогда 		 
			СтрокиДляИзменения[0][ИмяРеквизита] = ТекущиеДанные["ЮТР_" + ИмяРеквизита];	
		КонецЕсли; 		
	КонецЕсли;
	
КонецПроцедуры


//Проверка необходимости добавления основания табличную часть только для особенных видов расчетов
//
&НаСервере
Функция ЮТР_НеобходимоДобавитьСтроку(Сотрудник)	
	   
	   МассивНачислений =
	   ЮТР_ОбщегоНазначения.ОпределитьЭлементыПоДополнительномуЗначению("efc9a30b-fc81-431b-9667-50d7dd138403","ПланВидовРасчета.Начисления");
	
	   Для каждого стр из МассивНачислений Цикл 
	        НайденныеСтроки = Объект.НачисленияСотрудников.НайтиСтроки(Новый Структура("Сотрудник, Начисление, Действие", Сотрудник, стр, Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить)); 
			Если НайденныеСтроки.Количество() > 0  Тогда
				 Возврат Истина
			 КонецЕсли
	   КонецЦикла;
		 
	   Возврат  Ложь	
	
КонецФункции	



#КонецОбласти

