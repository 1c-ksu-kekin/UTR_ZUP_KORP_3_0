
&НаКлиенте
Процедура ЮТР_ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсиейФлажокПриИзменении(Элемент)
	
	Если Элементы.Найти("ЮТР_ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией") <> Неопределено И НЕ ЭтаФорма.ЮТР_ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией Тогда
		Объект.ЮТР_ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией = ПредопределенноеЗначение("Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка");
	КонецЕсли;
	ЮТР_УстановитьДоступностьЭлементов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЮТР_ДобавитьНачислениеСтруктурнаяНадбавка(Территория)
	
	Если Территория.ЮТР_СтруктурнаяНадбавка > 1 Тогда
		НоваяСтрока = Объект.Начисления.Добавить();
		НоваяСтрока.Начисление = ЮТР_РасчетЗарплаты.НачислениеСтруктурнаяНадбавка(); 
		НоваяСтрока.Размер = Территория.ЮТР_СтруктурнаяНадбавка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ДолжностьПриИзменении(Элемент)
	
	ЗаполнитьНаименование();
	ЮТР_ДолжностьПриИзмененииНаСервере();
	//ЮТ начало добавления
	Если Элементы.Найти("ЮТР_ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией") <> Неопределено Тогда
		ЮТР_ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией = ЗначениеЗаполнено(Объект.ЮТР_ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией);
    КонецЕсли;
	//ЮТ окончание добавления
	УстановитьВыполнениеОбработчиковСобытия(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЮТР_ДолжностьПриИзмененииНаСервере(УстанавливатьДоступностьСведений = Истина)
	Если ЗначениеЗаполнено(Объект.Должность) Тогда
		УстановитьПодходящуюДатуУтверждения();
		//ЮТ начало добавления
		//ДанныеДолжности = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Должность, "ТарифнаяСетка,ТарифнаяСеткаНадбавки,РазрядКатегория,РазрядКатегорияНадбавки");
		ДанныеДолжности = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Должность, "ТарифнаяСетка,ТарифнаяСеткаНадбавки,РазрядКатегория,РазрядКатегорияНадбавки,ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией,ОснованиеДосрочногоНазначенияПенсии,ОсобыеУсловияТрудаПФР,КодПозицииСпискаПФР");
		//ЮТ окончание добавления
		Объект.ТарифнаяСетка = ДанныеДолжности.ТарифнаяСетка;
		Объект.ТарифнаяСеткаНадбавки = ДанныеДолжности.ТарифнаяСеткаНадбавки;
		Объект.РазрядКатегория = ДанныеДолжности.РазрядКатегория;
		Объект.РазрядКатегорияНадбавки = ДанныеДолжности.РазрядКатегорияНадбавки;
		//ЮТ начало добавления
		Объект.ЮТР_ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией = ДанныеДолжности.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией;
		Объект.ЮТР_КодПозицииСпискаПФР = ДанныеДолжности.КодПозицииСпискаПФР;
		Объект.ЮТР_ОснованиеДосрочногоНазначенияПенсии = ДанныеДолжности.ОснованиеДосрочногоНазначенияПенсии;
		Объект.ЮТР_ОсобыеУсловияТрудаПФР = ДанныеДолжности.ОсобыеУсловияТрудаПФР;
		//ЮТ окончание добавления
		
		// Установим класс условий труда по должности
		РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтотОбъект, "КлассыУсловийТрудаПоДолжностям", Объект.Должность);
		КлассУсловийТрудаПоДолжности = Новый ФиксированнаяСтруктура("Период, ДатаРегистрацииИзменений, КлассУсловийТруда, Должность", КлассыУсловийТрудаПоДолжностям.Период,
			КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений, КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда, СсылкаНаОбъект);
		РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтотОбъект, "КлассыУсловийТрудаПоДолжностям", СсылкаНаОбъект);
		Если Не ЗначениеЗаполнено(КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда) Тогда
			КлассыУсловийТрудаПоДолжностямПрежняя = КлассУсловийТрудаПоДолжности;
			ЗаполнитьЗначенияСвойств(КлассыУсловийТрудаПоДолжностям, КлассУсловийТрудаПоДолжности);
		КонецЕсли;
		РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(ЭтаФорма, "КлассыУсловийТрудаПоДолжностям", СсылкаНаОбъект);
		КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений = НачалоМесяца(КлассыУсловийТрудаПоДолжностям.Период);
		КлассыУсловийТрудаПоДолжностямПериод = КлассыУсловийТрудаПоДолжностям.Период;
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "КлассыУсловийТрудаПоДолжностямПериод", "КлассыУсловийТрудаПоДолжностямПериодСтрокой");
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений", "КлассыУсловийТрудаПоДолжностямДатаРегистрацииИзмененийСтрокой");
		ОбновитьПолеКлассыУсловийТрудаПоДолжностямДатаРегистрацииИзменений(ЭтотОбъект);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТарифнаяСетка) Тогда
		ЗаполнитьДанныеТарифнойСеткиНаСервере();
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.ТарифнаяСеткаНадбавки) Тогда
		ЗаполнитьДанныеТарифнойСеткиНадбавкиНаСервере();
	КонецЕсли; 

	Если УстанавливатьДоступностьСведений Тогда
		УстановитьДоступностьСведенийПозиции();
	КонецЕсли; 
	
	УправлениеШтатнымРасписаниемФормы.ПрочитатьДополнительныеДанныеДолжностиДляПозицииШтатногоРасписания(ЭтаФорма);
	
	КадровыйУчетРасширенный.УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуСодержанию(
		ЭтаФорма,
		ОписаниеТаблицыНачислений(ЭтаФорма),
		УправлениеШтатнымРасписанием.ЗначениеПараметраВыбораНачисленийПоОтношениюКДенежномуСодержанию(ЭтаФорма));
КонецПроцедуры
	
	
&НаСервере
Процедура ЮТР_ДополнитьФорму()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДолжности = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Должность, "ВыплачиваетсяНадбавкаЗаВредность,ПроцентНадбавкиЗаВредность");
	
	Если ДанныеДолжности.ВыплачиваетсяНадбавкаЗаВредность = Истина Тогда
		
		ВыплачиваетсяНадбавкаЗаВредность = ДанныеДолжности.ВыплачиваетсяНадбавкаЗаВредность;
		ПроцентНадбавкиЗаВредность = ДанныеДолжности.ПроцентНадбавкиЗаВредность;
		
		НачисленияНадбавкаЗаВредность = РасчетЗарплаты.НачисленияПоКатегории(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность);
		Если НачисленияНадбавкаЗаВредность.Количество() > 0 Тогда
			НачислениеНадбавкаЗаВредность = НачисленияНадбавкаЗаВредность[0];
		КонецЕсли; 
		
		НачислениеНадбавкаЗаВредностьПредставление = УправлениеШтатнымРасписаниемКлиентСервер.ПредставлениеНадбавкиЗаВредность(
			НачислениеНадбавкаЗаВредность, ПроцентНадбавкиЗаВредность);
			
	КонецЕсли;
	
	НачислениеРайонныйКоэффициент = РасчетЗарплаты.НачислениеРайонныйКоэффициент();
	НачислениеСевернаяНадбавка = РасчетЗарплаты.НачислениеСевернаяНадбавка();
	
	ДанныеОПодразделении = ДанныеПодразделения(Объект.Подразделение);
	
	РайонныйКоэффициент = ДанныеОПодразделении.РайонныйКоэффициент;
	РайонныйКоэффициентПредставление = УправлениеШтатнымРасписаниемКлиентСервер.ПредставлениеРайонногоКоэффициента(НачислениеРайонныйКоэффициент, РайонныйКоэффициент);
	
	ПроцентСевернойНадбавки = ДанныеОПодразделении.ПроцентСевернойНадбавки;
	СевернаяНадбавкаПредставление = УправлениеШтатнымРасписаниемКлиентСервер.ПредставлениеСевернойНадбавки(НачислениеСевернаяНадбавка, ПроцентСевернойНадбавки);
	//ЮТ начало добавления
	//ТерриториальныеУсловияПФР = ТерриториальныеУсловияПФРПодразделения(Объект.Подразделение, ТекущаяДатаСеанса());
	Если ЗначениеЗаполнено(Объект.ЮТР_Территория) Тогда
		ТерриториальныеУсловияПФР = ТерриториальныеУсловияПФРПодразделения(Объект.ЮТР_Территория, ТекущаяДатаСеанса());
	Иначе
		ТерриториальныеУсловияПФР = ТерриториальныеУсловияПФРПодразделения(Объект.Подразделение, ТекущаяДатаСеанса());
	КонецЕсли;	
	ЮТР_ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией = ЗначениеЗаполнено(Объект.ЮТР_ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией);
	//ЮТ окончание добавления
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Владелец));
	
	УстановитьОтображениеПолейВводаПроцентаЗаВредность(ЭтаФорма, ВыплачиваетсяНадбавкаЗаВредность);
	
	УстановитьОтображениеПолейВводаРайонногоКоэффициента(ЭтаФорма, РайонныйКоэффициент);

	УстановитьОтображениеПолейВводаСевернойНадбавки(ЭтаФорма, ТерриториальныеУсловияПФР);
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений(ЭтаФорма);
	
	Если ВнешниеДанные Тогда
		
		ЗарплатаКадрыРасширенный.РедактированиеСоставаНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыВидовРасчета, "Начисления", 0, ИспользоватьРасчетЗарплаты);
	
	Иначе
			
		ЗарплатаКадрыРасширенный.ВводНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыВидовРасчета, 0, "Начисления", ИспользоватьРасчетЗарплаты);
			
	КонецЕсли;
	
	УправлениеШтатнымРасписаниемФормы.ДополнитьФормуЭлементаСправочникаШтатноеРасписание(ЭтаФорма);
	УправлениеШтатнымРасписаниемФормы.ПрочитатьДополнительныеДанныеДолжностиДляПозицииШтатногоРасписания(ЭтаФорма);
	ПрочитатьКлассыУсловийТрудаПоДолжностям();
	
	// Настройка таблицы ввода дополнительных тарифных ставок, коэффициентов и т.д.	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДополнительныеТарифыКоэффициентыГруппа",
		"Видимость",
		ПолучитьФункциональнуюОпциюФормы("ИспользоватьНесколькоТарифныхСтавок")
	);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СпециальностиСтраница",
		"Видимость",
		ПолучитьФункциональнуюОпциюФормы("ИспользоватьСпециальностиФизическихЛиц")
	);
		
	// Показатели с нулевым идентификатором строки - независимые.
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Показатели",
		"ОтборСтрок",
		Новый ФиксированнаяСтруктура("ИдентификаторСтрокиВидаРасчета", 0)
	);
	
	// Настраиваем параметры выбора показателя.
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.СпособПримененияЗначений", Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное));
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.НазначениеПоказателя", Перечисления.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника));
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЗначениеРассчитываетсяАвтоматически", Ложь));
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.НеИспользуется", Ложь));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПоказателиПоказатель",
		"ПараметрыВыбора",
		Новый ФиксированныйМассив(МассивПараметровВыбора)
	);
	
	// Ограничение типа на значение.
	ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказателиЗначение", "ОграничениеТипа", ТипЧисло);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказателиЗначениеМин", "ОграничениеТипа", ТипЧисло);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказателиЗначениеМакс", "ОграничениеТипа", ТипЧисло);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("Грейды");
		Модуль.ГруппаГрейдДополнитьФорму(ЭтотОбъект);
		Модуль.ПрочитатьЗначениеГрейда(ЭтотОбъект);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ДополнитьФормуПозиции(ЭтотОбъект, ОписаниеТаблицыЛьгот());
		//ЮТ начало изменения 
		//32 521, 06.05.2015
		//Доработка ролей
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛьготыСтраница",
		"Видимость",
		Пользователи.РолиДоступны("ЮТР_ДобавлениеИзменениеШтатногоРасписания")
		);
		//ЮТ окончание изменения
	КонецЕсли;
	
	// Подсистема "Охрана труда"
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОхранаТрудаФормы");
		Модуль.ДополнитьФормуПозицииШтатногоРасписания(ЭтотОбъект);
	КонецЕсли;
	
	// Подсистема "Охрана труда"
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОхранаТрудаФормы");
		Модуль.ПрочитатьДополнительныеЗначенияПозицииШтатногоРасписания(ЭтотОбъект);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.ПриСозданииФормыПозицииШтатногоРасписания(ЭтаФорма);
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

&НаСервере
Процедура ЮТР_ЗапомнитьЗначенияФункциональныхОпцийИНабораПрав()
	
	ИспользоватьВилкуСтавок = ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	ИспользоватьИсторию = ПолучитьФункциональнуюОпциюФормы("ИспользоватьИсториюИзмененияШтатногоРасписания");
	
	ИспользоватьРасчетЗарплаты = ПолучитьФункциональнуюОпциюФормы("ИспользоватьРасчетЗарплатыРасширенная")
	//ЮТ начало изменения 
	//32 521, 06.05.2015
	//Добавлены новые роли
	//	И Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленийШтатногоРасписания,ЧтениеНачисленийШтатногоРасписания", , Ложь);
		И Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленийШтатногоРасписания,ЧтениеНачисленийШтатногоРасписания,ЮТР_ДобавлениеИзменениеНачисленийШтатногоРасписания", , Ложь);
	//ЮТ окончание изменения
	ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессий = ПолучитьФункциональнуюОпциюФормы("ИспользоватьПриОписанииПозицииШтатногоРасписанияРазрядыКатегорииКлассыДолжностейИПрофессий");
	
КонецПроцедуры

&НаСервере
Процедура ЮТР_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.ИнициализироватьМеханизмПересчетаДокументаПриРедактировании(ЭтаФорма);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Подсистема "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");	
	
	ВнешниеДанные = Ложь;
	СуществующаяПозиция = Ложь;
	ЗаголовокФормы = "";
	
	СозданиеНовой = Параметры.Ключ.Пустая();
	
	Если СозданиеНовой И НЕ Параметры.Свойство("АдресДанныхПозицииВХранилище") Тогда
		
		СсылкаНаОбъект = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ПолучитьСсылку();
		
		ЮТР_ЗапомнитьЗначенияФункциональныхОпцийИНабораПрав();
		
		ОрганизацияФормы = Объект.Владелец;
		ЮТР_ДополнитьФорму();
		
		ЗначенияДляЗаполнения = Новый Структура;
		ЗначенияДляЗаполнения.Вставить("Организация",	"Объект.Владелец");
		ЗначенияДляЗаполнения.Вставить("ГрафикРаботы",	"Объект.ГрафикРаботыСотрудников");
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		Если Не ЗначениеЗаполнено(Объект.ДатаУтверждения) Тогда
			УстановитьПодходящуюДатуУтверждения();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ТекущийОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ШтатноеРасписание"));
			ПоместитьДанныеОбъектаВФорму(ТекущийОбъект);
		КонецЕсли;
		
	Иначе
		
		Если Параметры.Свойство("АдресДанныхПозицииВХранилище") Тогда
			
			ЮТР_ЗапомнитьЗначенияФункциональныхОпцийИНабораПрав();
			
			Если ИспользоватьИсторию Тогда
				
				ДанныеПозиции = ПолучитьИзВременногоХранилища(Параметры.АдресДанныхПозицииВХранилище);
				
				ДанныеПозиции.Свойство("Действие", Действие);
				ДанныеПозиции.Свойство("ТекущееКоличествоСтавок", ТекущееКоличествоСтавок);
				ДанныеПозиции.Свойство("ТекущийФОТ", ТекущийФОТ);
				ЗаполнитьЗначенияСвойств(
					Объект, ДанныеПозиции, , "Начисления,Показатели,ЕжегодныеОтпуска,Специальности");
				Объект.Владелец = ДанныеПозиции.Организация;
				
				ВнешниеДанные = Истина;
				УстановитьПредставлениеОкладаИФОТ(ЭтаФорма);
				
				РедактируемаяПозиция = ДанныеПозиции.ПозицияШтатногоРасписания;
				СуществующаяПозиция = ЗначениеЗаполнено(РедактируемаяПозиция);
				
				Если Не СуществующаяПозиция Тогда
					СсылкаНаОбъект = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ПолучитьСсылку();
				КонецЕсли;
				
				ЮТР_ДополнитьФорму();
				
				ТолькоПросмотр = ДанныеПозиции.ТолькоПросмотр;
				
				Объект.ДатаУтверждения = ДанныеПозиции.ДатаУтверждения;
				
				ОрганизацияФормы = Объект.Владелец;
				
				Если СуществующаяПозиция Тогда
					АвтоЗаголовок = Ложь;
					Заголовок = Строка(ДанныеПозиции.ПозицияШтатногоРасписания);
				Иначе
					
					Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
						Объект.Подразделение = ДанныеПозиции.ПодразделениеПозиций;
					КонецЕсли; 
					
					ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
						Элементы,
						"Подразделение",
						"ТолькоПросмотр",
						ЗначениеЗаполнено(ДанныеПозиции.ПодразделениеПозиций)
					);
					
					// Прочитаем класс условий труда
					КлассыУсловийТрудаПоДолжностям.Должность = СсылкаНаОбъект;
					КлассыУсловийТрудаПоДолжностям.Период = ДанныеПозиции.КлассыУсловийТрудаПоДолжностямПериод;
					КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда = ДанныеПозиции.КлассыУсловийТрудаПоДолжностямКлассУсловийТруда;
					КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений = ДанныеПозиции.КлассыУсловийТрудаПоДолжностямДатаРегистрацииИзменений;
					РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(ЭтаФорма, "КлассыУсловийТрудаПоДолжностям", СсылкаНаОбъект);
					КлассыУсловийТрудаПоДолжностямПериод = КлассыУсловийТрудаПоДолжностям.Период;
					ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "КлассыУсловийТрудаПоДолжностямПериод", "КлассыУсловийТрудаПоДолжностямПериодСтрокой");
					ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений", "КлассыУсловийТрудаПоДолжностямДатаРегистрацииИзмененийСтрокой");
					ОбновитьПолеКлассыУсловийТрудаПоДолжностямДатаРегистрацииИзменений(ЭтотОбъект);
					
				КонецЕсли;
				
				Объект.Начисления.Очистить();
				Объект.Показатели.Очистить();
				Объект.ЕжегодныеОтпуска.Очистить();
				Объект.Специальности.Очистить();
				
				Для каждого ОписаниеНачисления Из ДанныеПозиции.Начисления Цикл
					ЗаполнитьЗначенияСвойств(Объект.Начисления.Добавить(), ОписаниеНачисления);
				КонецЦикла;
					
				Для каждого ОписаниеПоказателя Из ДанныеПозиции.Показатели Цикл
					ЗаполнитьЗначенияСвойств(Объект.Показатели.Добавить(), ОписаниеПоказателя);
				КонецЦикла;
					
				Для каждого ОписаниеЕжегодногоОтпуска Из ДанныеПозиции.ЕжегодныеОтпуска Цикл
					ЗаполнитьЗначенияСвойств(Объект.ЕжегодныеОтпуска.Добавить(), ОписаниеЕжегодногоОтпуска);
				КонецЦикла;
				
				Для каждого ОписаниеСпециальности Из ДанныеПозиции.Специальности Цикл
					ЗаполнитьЗначенияСвойств(Объект.Специальности.Добавить(), ОписаниеСпециальности);
				КонецЦикла;
				
			Иначе
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЮТР_УстановитьСвойстваЭлементовУправления();
	ЮТР_УстановитьДоступностьЭлементов(ЭтаФорма);
	//ЮТ начало изменения 
	//32521, 05.05.2015
	//Настройка прав на штатное расписание
	//Элементы.ТарифнаяСетка.Заголовок = РазрядыКатегорииДолжностей.ИнициализироватьЗаголовокФормыИРеквизитов("РеквизитТарифнаяСеткаТариф");
	//Элементы.РазрядКатегория.Заголовок = РазрядыКатегорииДолжностей.ИнициализироватьЗаголовокФормыИРеквизитов("РеквизитРазрядКатегорияТариф");	
	//Элементы.ТарифнаяСеткаНадбавки.Заголовок = РазрядыКатегорииДолжностей.ИнициализироватьЗаголовокФормыИРеквизитов("РеквизитТарифнаяСеткаНадбавка");
	//Элементы.РазрядКатегорияНадбавки.Заголовок = РазрядыКатегорииДолжностей.ИнициализироватьЗаголовокФормыИРеквизитов("РеквизитРазрядКатегорияНадбавка");	
	Если Элементы.Найти("ТарифнаяСетка") <> Неопределено Тогда
		Элементы.ТарифнаяСетка.Заголовок = РазрядыКатегорииДолжностей.ИнициализироватьЗаголовокФормыИРеквизитов("РеквизитТарифнаяСеткаТариф");
	КонецЕсли;
	Если Элементы.Найти("РазрядКатегория") <> Неопределено Тогда
		Элементы.РазрядКатегория.Заголовок = РазрядыКатегорииДолжностей.ИнициализироватьЗаголовокФормыИРеквизитов("РеквизитРазрядКатегорияТариф");
	КонецЕсли;
	Если Элементы.Найти("ТарифнаяСеткаНадбавки") <> Неопределено Тогда
		Элементы.ТарифнаяСеткаНадбавки.Заголовок = РазрядыКатегорииДолжностей.ИнициализироватьЗаголовокФормыИРеквизитов("РеквизитТарифнаяСеткаНадбавка");
	КонецЕсли;
	Если Элементы.Найти("РазрядКатегорияНадбавки") <> Неопределено Тогда
		Элементы.РазрядКатегорияНадбавки.Заголовок = РазрядыКатегорииДолжностей.ИнициализироватьЗаголовокФормыИРеквизитов("РеквизитРазрядКатегорияНадбавка");
	КонецЕсли;
	//ЮТ начало изменения 
	//32521, 05.05.2015
	//Настройка прав на штатное расписание
	//Если НЕ ИспользоватьРасчетЗарплаты Тогда
	//	
	//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
	//		Элементы,
	//		"СтраницыФормы",
	//		"ОтображениеСтраниц",
	//		ОтображениеСтраницФормы.Нет);
	//		
	//КонецЕсли;
	//ЮТ окончание изменения
	
	Если СозданиеНовой Тогда 
		ДоступныВсеЛьготы = 1;
	КонецЕсли;
	
	УстановитьДоступностьИндивидуальныхЛьгот();
	УстановитьДоступностьРазмераЛимитаЛьготы(ЭтотОбъект);
	
	ТекстПодсказкиКПоляДатаРегистрации = УчетСтраховыхВзносовКлиентСервер.ТекстПодсказкиПоляДатаРегистрацииПериодическихРегистров();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"КлассыУсловийТрудаПоДолжностямДатаРегистрацииИзменений", 
		"Подсказка", 
		ТекстПодсказкиКПоляДатаРегистрации);
		
	УстановитьВыполнениеОбработчиковСобытия(Ложь);
	
КонецПроцедуры
	
	&НаКлиентеНаСервереБезКонтекста
Процедура ЮТР_УстановитьДоступностьЭлементов(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДатаЗакрытия",
		"Доступность",
		Форма.Объект.Закрыта);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Закрыта",
		"Доступность",
		Форма.Объект.Утверждена);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДатаУтверждения",
		"Доступность",
		Форма.Объект.Утверждена);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ГруппаСпецоценкаУсловийТруда",
		"ТолькоПросмотр",
		Форма.СуществующаяПозиция
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"КлассУсловийТрудаИстория",
		"Видимость",
		Не Форма.ВнешниеДанные
	);
	
	//ЮТ начало добавления
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ЮТР_ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией",
		"Доступность",
		Форма.ЮТР_ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
	Форма.Элементы,
	"ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсиейФлажок",
	"Видимость",
	Форма.Элементы.Найти("ЮТР_ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией") <> Неопределено
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
	Форма.Элементы,
	"ЛьготыСтраница",
	"Видимость",
	ЮТР_УправлениеРаботойТиповыхФормВызовСервера.РолиДоступны("ЮТР_ДобавлениеИзменениеШтатногоРасписания")
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
	Форма.Элементы,
	"ГруппаСпецоценкаУсловийТруда",
	"Видимость",
	НЕ ЮТР_УправлениеРаботойТиповыхФормВызовСервера.ОпределитьДоступностьРоли("ЮТР_ДобавлениеИзменениеНачисленийШтатногоРасписания")
	);

    //ЮТ окончание добавления
	
КонецПроцедуры


&НаСервере 
Процедура ЮТР_УстановитьСвойстваЭлементовУправления()
	
	Если ИспользоватьИсторию Тогда
		
		Если ВнешниеДанные Тогда
			УстановитьСвойстваЭлементовУправленияДляВнешнихДанных();
		Иначе
			ЗаполнитьУтвердившийИЗакрывшийРегистраторы();
			ЮТР_УстановитьСвойстваЭлементовУправленияПриВеденииИстории();
		КонецЕсли;
		
	Иначе
		
		Если НЕ СозданиеНовой Тогда
			ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ТолькоПросмотр ИЛИ ИспользоватьИсторию И НЕ ВнешниеДанные Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"РедактироватьФОТ",
			"Картинка",
			БиблиотекаКартинок.ПоказатьДанные);
			
		КомандаРедактированияФОТ = Команды.Найти("РедактироватьФОТ");
		Если КомандаРедактированияФОТ <> Неопределено Тогда
			КомандаРедактированияФОТ.Заголовок = НСтр("ru='Показать ФОТ'");
			КомандаРедактированияФОТ.Подсказка = НСтр("ru='Показать ФОТ'");
		КонецЕсли; 
				
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НадписьОклад",
		"Видимость",
		ИспользоватьРасчетЗарплаты);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НадписьФОТ",
		"Видимость",
		ИспользоватьРасчетЗарплаты);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"КоличествоСтавок",
		"ФорматРедактирования",
		УправлениеШтатнымРасписанием.ФорматКоличестваСтавок());
			
	КадровыйУчетРасширенный.УстановитьПараметрыВыбораНачисленийПоКатегории(
		ЭтаФорма,
		ОписаниеТаблицыНачислений(ЭтаФорма),
		УправлениеШтатнымРасписанием.ПараметрыВыбораКатегорииНачислений());
	
	КадровыйУчетРасширенный.УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуСодержанию(
		ЭтаФорма,
		ОписаниеТаблицыНачислений(ЭтаФорма),
		УправлениеШтатнымРасписанием.ЗначениеПараметраВыбораНачисленийПоОтношениюКДенежномуСодержанию(ЭтаФорма)); 
		
	УстановитьДоступностьСведенийПозиции();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗначенияТарифныхСтавок",
		"Видимость",
		?(Элементы.Найти("Начисления") = Неопределено, Ложь, Элементы.Начисления.Видимость)
	);
	
КонецПроцедуры


&НаСервере
Процедура ЮТР_УстановитьСвойстваЭлементовУправленияПриВеденииИстории()
	
	// Ключевые реквизиты
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Владелец",
		"ТолькоПросмотр",
		Истина
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Подразделение",
		"ТолькоПросмотр",
		Истина
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Должность",
		"ТолькоПросмотр",
		Истина
	);
	
	// Отражение в учете
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СпособОтраженияЗарплатыВБухучете",
		"ТолькоПросмотр",
		Истина
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОтношениеКЕНВД",
		"ТолькоПросмотр",
		Истина
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СтатьяФинансирования",
		"ТолькоПросмотр",
		Истина
	);
	
	// Остальные не редактируемые реквизиты.
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РазрядКатегория",
		"ТолькоПросмотр",
		Истина
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТарифнаяСетка",
		"ТолькоПросмотр",
		Истина
	);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РазрядКатегорияНадбавки",
		"ТолькоПросмотр",
		Истина
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТарифнаяСеткаНадбавки",
		"ТолькоПросмотр",
		Истина
	);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"КоличествоСтавок",
		"ТолькоПросмотр",
		Истина
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"УсловияПриема",
		"ТолькоПросмотр",
		Истина
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"УтвердившийРегистраторНадпись",
		"Видимость",
		Истина
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗакрывшийРегистраторНадпись",
		"Видимость",
		Истина
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Утверждена",
		"Видимость",
		Ложь
	);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДатаУтверждения",
		"Видимость",
		Ложь
	);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Закрыта",
		"Видимость",
		Ложь
	);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДатаЗакрытия",
		"Видимость",
		Ложь
	);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГрафикРаботыСотрудников",
		"ТолькоПросмотр",
		Истина
	);
	
	//ЮТ начало изменения 
	//32521, 05.05.2015
	//Закроем элементы, изменяемые только документами
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсиейФлажок",
		"ТолькоПросмотр",
		Истина
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЮТР_ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией",
		"ТолькоПросмотр",
		Истина
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЮТР_ОснованиеДосрочногоНазначенияПенсии",
		"ТолькоПросмотр",
		Истина
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЮТР_ОсобыеУсловияТрудаПФР",
		"ТолькоПросмотр",
		Истина
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЮТР_КодПозицииСпискаПФР",
		"ТолькоПросмотр",
		Истина
	);
	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Территория",
		"ТолькоПросмотр",
		Истина
	);
	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"МуниципальноеОбразование",
		"ТолькоПросмотр",
		Истина
	);
	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЮТР_ВидПерсонала",
		"ТолькоПросмотр",
		Истина
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗначенияТарифныхСтавок",
		"Видимость",
		?(Элементы.Найти("Начисления") = Неопределено, Ложь, Элементы.Начисления.Видимость)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсиейФлажок",
		"Видимость",
		?(Элементы.Найти("ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсиейФлажок") = Неопределено, Ложь, Элементы.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсиейФлажок.Видимость)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛьготыСтраница",
		"Видимость",
		Пользователи.РолиДоступны("ЮТР_ДобавлениеИзменениеШтатногоРасписания")
	);
	
	//ЮТ окончание изменения
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЕжегодныеОтпуска",
		"ТолькоПросмотр",
		Истина
	);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Специальности",
		"ТолькоПросмотр",
		Истина
	);
		
	// Страница "Оплата труда"
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаДанныеГоризонтальная",
		"ТолькоПросмотр",
		Истина
	);
	
	// Команда пересчета ФОТ
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Рассчитать",
		"Видимость",
		Ложь
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ТерриторияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ЮТР_МуниципальноеОбразование) Тогда
		ЮТР_ДобавитьНачислениеСтруктурнаяНадбавка(Объект.ЮТР_МуниципальноеОбразование);
	КонецЕсли;
	
	ЮТР_ТерриторияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЮТР_ПриЧтенииНаСервере(ТекущийОбъект)
	
	ИзмененыНачисления = Ложь;
	
	СсылкаНаОбъект = Объект.Ссылка;
	ОрганизацияФормы = Объект.Владелец;
	
	ЮТР_ЗапомнитьЗначенияФункциональныхОпцийИНабораПрав();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЮТР_ДополнитьФорму();
	ПоместитьДанныеОбъектаВФорму(ТекущийОбъект);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") И Пользователи.РолиДоступны("ЮТР_ДобавлениеИзменениеШтатногоРасписания") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ПрочитатьЛьготыПозиции(ЭтотОбъект, Объект.Ссылка, ОписаниеТаблицыЛьгот(), , "ИндивидуальныеЛьготы");
		Модуль.ПрочитатьЛимитыЛьготПозиции(ЭтотОбъект);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьВыполнениеОбработчиковСобытия(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ВладелецПриИзменении(Элемент)
		
	Объект.Владелец = ОрганизацияФормы;
	ЮТР_ВладелецПриИзмененииНаСервере();
	
	Если ЗначениеЗаполнено(Объект.ГрафикРаботыСотрудников) Тогда
		ВыполнитьРасчетФОТ();
	КонецЕсли; 
	
	УстановитьВыполнениеОбработчиковСобытия(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЮТР_ВладелецПриИзмененииНаСервере()
	
	ЮТР_ДополнитьФорму();
	УстановитьГрафикРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ПодразделениеПриИзменении(Элемент)
	
	ЗаполнитьНаименование();
	ЮТР_ПодразделениеПриИзмененииНаСервере();
	
	Если ЗначениеЗаполнено(Объект.ГрафикРаботыСотрудников) Тогда
		ВыполнитьРасчетФОТ();
	КонецЕсли; 
	
	УстановитьВыполнениеОбработчиковСобытия(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЮТР_ПодразделениеПриИзмененииНаСервере(УстанавливатьДоступностьСведений = Истина)
	
	ЮТР_ДополнитьФорму();
	
	УстановитьГрафикРаботы();
	УстановитьПодходящуюДатуУтверждения();
	ОстаткиОтпусков.ПрименитьНастройкиИспользованияСеверногоОтпуска(Объект.ЕжегодныеОтпуска, Объект.Владелец, Объект.ДатаУтверждения, Объект.Подразделение, , Действие <> Перечисления.ДействияСПозициямиШтатногоРасписания.СоздатьНовуюПозицию);
	ОстаткиОтпусков.ПрименитьНастройкиИспользованияОтпускаЗаВредность(Объект.ЕжегодныеОтпуска, Объект.Должность, Действие <> Перечисления.ДействияСПозициямиШтатногоРасписания.СоздатьНовуюПозицию);
	
	Если УстанавливатьДоступностьСведений Тогда
		УстановитьДоступностьСведенийПозиции();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЮТР_ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("Грейды");
		Модуль.ЗаписатьЗначениеГрейда(ЭтотОбъект, ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") И Пользователи.РолиДоступны("ЮТР_ДобавлениеИзменениеШтатногоРасписания") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.СохранитьДанныеПозиции(ЭтотОбъект);
	КонецЕсли;
		
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.ПриЗаписиФормыПозицииШтатногоРасписания(ЭтаФорма, ТекущийОбъект);
	КонецЕсли;
	
	УстановитьВыполнениеОбработчиковСобытия(Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЮТР_ПолучитьТерриториюВыполненияРабот(МуниципальноеОбразование)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТерриторииВыполненияРабот.Ссылка КАК Территория
	                      |ИЗ
	                      |	Справочник.ТерриторииВыполненияРабот КАК ТерриторииВыполненияРабот
	                      |ГДЕ
	                      |	ТерриторииВыполненияРабот.ЮТР_МуниципальноеОбразование = &МуниципальноеОбразование");
						  
	Запрос.УстановитьПараметр("МуниципальноеОбразование", МуниципальноеОбразование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоТерриторий =  Выборка.Количество();
	Территория = Справочники.ТерриторииВыполненияРабот.ПустаяСсылка();
	
	Если КоличествоТерриторий = 1 И Выборка.Следующий() Тогда
		Территория = Выборка.Территория; 
	КонецЕсли;
	
	Возврат Территория;
			
КонецФункции	

&НаСервере
Процедура ЮТР_ТерриторияПриИзмененииНаСервере()
	
	//добавим территорию выполнения работ, если соответсвие 1:1
	Объект.ЮТР_Территория = ЮТР_ПолучитьТерриториюВыполненияРабот(Объект.ЮТР_МуниципальноеОбразование);
	
КонецПроцедуры







