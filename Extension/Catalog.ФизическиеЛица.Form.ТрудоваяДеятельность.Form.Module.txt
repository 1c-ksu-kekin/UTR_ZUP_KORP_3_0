
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ЮТР_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, "Заголовок,ФизическоеЛицоСсылка, СотрудникСсылка");
	
	СотрудникиФормы.ПрочитатьДанныеИзХранилищаВФорму(
		ЭтаФорма,
		СотрудникиКлиентСервер.ОписаниеДополнительнойФормы(ИмяФормы),
		Параметры.АдресВХранилище);
	
	
	ЮТР_ПроинициализироватьФорму();
	УстановитьВыполнениеОбработчиковСобытия(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ПриОткрытии(Отказ)
	
	УстановитьВыполнениеПослеОбработчиковСобытия("ЮТР_ПриОткрытииПосле", Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ПриОткрытииПосле(Отказ, ДополнительныйПараметр)
	
	//ЮТР начало изменения 
	//{32 600}, 28.04.2015
	//Добавление возможности ввода информацию о стаже в разрезе работника
	
	ЮТР_ТрудоваяДеятельностьПриАктивизацииСтроки(Элементы.ЮТР_ТрудоваяДеятельность);
	
	//ЮТР окончание изменения	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТрудоваяДеятельность

&НаКлиенте
Процедура ЮТР_ТрудоваяДеятельностьФизическихЛицПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УстановитьВыполнениеПослеОбработчиковСобытия("ЮТР_ТрудоваяДеятельностьФизическихЛицПриНачалеРедактированияПосле", Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ТрудоваяДеятельностьФизическихЛицПриНачалеРедактированияПосле(Элемент, НоваяСтрока, Копирование, ДополнительныйПараметр)
	
	//ЮТР начало изменения 
	//{32 594}, 13.03.2015
	//по умолчанию присваиваем строку, чтобы не нужно было выбирать тип значения
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Должность = "";
		Элемент.ТекущиеДанные.Организация = ТекущаяОрганизация;
	КонецЕсли;
	//ЮТР окончание изменения	
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ТрудоваяДеятельностьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока  Тогда
	
		Элемент.ТекущиеДанные.ФизическоеЛицо	= ФизическоеЛицоСсылка;
		Элемент.ТекущиеДанные.Организация		= ТекущаяОрганизация;
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ТрудоваяДеятельностьПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	ЮТР_ДобавитьВидыСтажейДляВключения(Новый Структура("АвтоЗапись, ID, ФизическоеЛицо", ТекущиеДанные.АвтоЗапись, ТекущиеДанные.ID, ТекущиеДанные.ФизическоеЛицо));
	
	ЮТР_УстановитьВидимостьВключенияТрудовойДейтельностиВСтаж(ТекущиеДанные);
	
	ЮТР_УстановитьОшибкуВводаТрудовойДейтельностиКлиент();
		
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_ТрудоваяДеятельностьПриАктивизацииСтроки(Элемент)
	
	ЮТР_УстановитьВидимостьВключенияТрудовойДейтельностиВСтаж(Элемент.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область СтажРаботыПоВидамВоздушныхСудов

&НаКлиенте
Процедура ЮТР_СтажРаботыПоВидамВоздушныхСудовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Элемент.ТекущиеДанные.ФизическоеЛицо = ФизическоеЛицоСсылка;
		
	КонецЕсли; 

	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Организация) Тогда
		
	    Элемент.ТекущиеДанные.Организация = ТекущаяОрганизация;
		 
	КонецЕсли; 
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЮТР_Ок(Команда)
	
	ЮТР_СохранитьИЗакрытьНаКлиенте();
	
	УстановитьВыполнениеОбработчиковСобытия(Ложь);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЮТР_ПроинициализироватьРеквизитыФормы()

	Если ПолучитьРеквизиты("ЮТР_ТрудоваяДеятельность").Количество() = 0 Тогда
		
		ТекстЗапросаДляВыбораКолонок =  "ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЛОЖЬ КАК АвтоЗапись,
			|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.Сотрудник КАК Сотрудник,
			|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.ДатаНачала КАК ДатаНачала,
			|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.ДатаОкончания КАК ДатаОкончания,
			|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.Организация КАК Организация,
			|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.Должность КАК Должность,
			|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.ДолжностьПоШтатномуРасписанию,
			|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.ТерриториальныеУсловияПФР,
			|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.МетодРаботы,
			|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.ДокументОснование КАК ДокументОснование,
			|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.РазмерМесяцев КАК РазмерМесяцев,
			|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.РазмерДней КАК РазмерДней,
			|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.ПризнакУвольнения КАК ПризнакУвольнения,
			|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.ДатаОкончанияПоРегистратору КАК ДатаОкончанияПоРегистратору,
			|	ЛОЖЬ КАК ЕстьОшибка,
			|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.НомерПоПорядку КАК НомерПоПорядку,
			|	"""" КАК ID,
			|	"""" КАК НомерПротоколаКомиссии,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПротоколаКомиссии
			|ИЗ
			|	РегистрСведений.ЮТР_ТрудоваяДеятельностьФизическихЛиц КАК ЮТР_ТрудоваяДеятельностьФизическихЛиц
			|ГДЕ
			|	ЛОЖЬ";
		
		
		ЮТР_ЗаполнитьРеквизитФормыТипаТаблицыЗначений("ЮТР_ТрудоваяДеятельность", ТекстЗапросаДляВыбораКолонок);
		
		
		ТекстЗапросаДляВыбораКолонок =  "ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЛОЖЬ КАК Пометка,
			|	ЮТР_ВключениеПериодовТрудовойДеятельностиВСтаж.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ЮТР_ВключениеПериодовТрудовойДеятельностиВСтаж.ID КАК ID,
			|	ЮТР_ВключениеПериодовТрудовойДеятельностиВСтаж.ВидСтажа КАК ВидСтажа
			|ИЗ
			|	РегистрСведений.ЮТР_ВключениеПериодовТрудовойДеятельностиВСтаж КАК ЮТР_ВключениеПериодовТрудовойДеятельностиВСтаж
			|ГДЕ
			|	ЛОЖЬ";
		
		ЮТР_ЗаполнитьРеквизитФормыТипаТаблицыЗначений("ЮТР_ВключениеПериодовВСтаж", ТекстЗапросаДляВыбораКолонок);
		
		// Добавим реквизиты для таблицы стажа работы 
		МассивРеквизитов  = Новый Массив;
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Сотрудник"	, Новый ОписаниеТипов("СправочникСсылка.Сотрудники")	, "СведенияОСтажах"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ДействуетДо"	, Новый ОписаниеТипов("Дата")							, "СведенияОСтажах"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("УчитываетсяВРазрезеПриемовНаРаботу" , Новый ОписаниеТипов("Булево")	, "СведенияОСтажах"));
		ИзменитьРеквизиты(МассивРеквизитов);
		
		
		МассивРеквизитов  = Новый Массив;
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ВидСтажа"	, Новый ОписаниеТипов("СправочникСсылка.ВидыСтажа")	, "ЮТР_СписокВидовСтажей"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("УчитываетсяВРазрезеПриемовНаРаботу" , Новый ОписаниеТипов("Булево")	, "ЮТР_СписокВидовСтажей"));
		ИзменитьРеквизиты(МассивРеквизитов);
		
		
	КонецЕсли; 
	
	
КонецПроцедуры

&НаСервере
Процедура ЮТР_УстановитьУсловноеОформление()
	
	//Начало типового оформления
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СведенияОСтажах");	
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СведенияОСтажах.ДатаОтсчета");
	
	//Конец  типового оформления
	
	
	ЭтаФорма.Элементы.ГруппаФизическоеЛицоТрудоваяДеятельность.Видимость = Ложь;

	// Добавим условное оформление для записей из кадрового документооборота.
	ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	// Создадим условие оформления.
	// Необходимо условие выполняющее всегда 
	ЭлементОтбора					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ТрудоваяДеятельностьФизическихЛицПрочитан");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	// Укажем цвет.
	ЭлементОформления				= ЭлементУсловногоОформления.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Видимость"));
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Значение 		= ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЮТР_ТрудоваяДеятельностьАвтоЗапись");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЮТР_ТрудоваяДеятельностьГоловнаяОрганизация");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЮТР_ТрудоваяДеятельностьСотрудник");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЮТР_ТрудоваяДеятельностьФизическоеЛицо");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЮТР_ТрудоваяДеятельностьРазмерМесяцев");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЮТР_ТрудоваяДеятельностьРазмерДней");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЮТР_ТрудоваяДеятельностьЕстьОшибка");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЮТР_ТрудоваяДеятельностьНомерПоПорядку");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЮТР_ТрудоваяДеятельностьID");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЮТР_ТрудоваяДеятельностьПризнакУвольнения");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЮТР_ТрудоваяДеятельностьДатаОкончанияПоРегистратору");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЮТР_ВключениеПериодовВСтажФизическоеЛицо");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЮТР_ВключениеПериодовВСтажID");

	// Добавим условное оформление для записей из кадрового документооборота.
	ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	 // Создадим условие оформления.
	ЭлементОтбора					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ЮТР_ТрудоваяДеятельность.АвтоЗапись");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	// Укажем цвет.
	ЭлементОформления				= ЭлементУсловногоОформления.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветТекста"));
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Значение 		= ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
	// Укажем цвет.
	ЭлементОформления				= ЭлементУсловногоОформления.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТолькоПросмотр"));
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Значение 		= Истина;
	// Укажем, что оформление нужно применять только к одному полю.
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЮТР_ТрудоваяДеятельность");
	
	// Добавим условное оформление для ручных записей.
	ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	 // Создадим условие оформления.
	ЭлементОтбора					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ЮТР_ТрудоваяДеятельность.АвтоЗапись");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	// Укажем ТолькоПросмотр.
	ЭлементОформления				= ЭлементУсловногоОформления.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Доступность"));
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Значение 		= Ложь;
	// Укажем, что оформление нужно применять только к одному полю.
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЮТР_ТрудоваяДеятельностьДокументОснование");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЮТР_ТрудоваяДеятельностьРазмерМесяцев");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТрудоваяДеятельностьРазмерДней");

	
	
	// Добавим условное оформление для строк с ошибками.
	ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	 // Создадим условие оформления.
	ЭлементОтбора					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ЮТР_ТрудоваяДеятельность.ЕстьОшибка");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	// Укажем ТолькоПросмотр.
	ЭлементОформления				= ЭлементУсловногоОформления.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветТекста"));
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Значение 		= ЦветаСтиля.РезультатПроблемаЦвет;
	// Укажем, что оформление нужно применять только к одному полю.
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЮТР_ТрудоваяДеятельность");
	
	
	// Добавим условное оформление для отражения видимости строк с ошибками.
	ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	// Создадим условие оформления.
	ЭлементОтбора					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ЮТР_ВключениеПериодовВСтаж.Пометка");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	// Укажем ТолькоПросмотр.
	ЭлементОформления				= ЭлементУсловногоОформления.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветТекста"));
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Значение 		= ЦветаСтиля.НедоступныеДанныеЦвет;
	
	// Укажем, что оформление нужно применять только к одному полю.
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЮТР_ВключениеПериодовВСтаж");

	
КонецПроцедуры

//Инициализация формы при ее открытии
&НаСервере
Процедура ЮТР_ПроинициализироватьФорму()

	ЮТР_ПроинициализироватьРеквизитыФормы();
	
	//Начало типового вызова
	Если НЕ СтажиФизическихЛицПрочитан Тогда
		СотрудникиФормыРасширенный.ПрочитатьНаборЗаписей(ЭтаФорма, "СтажиФизическихЛиц");
		СтажиФизическихЛицПрочитан = Истина;
	КонецЕсли; 
	
	Если НЕ НаградыФизическихЛицПрочитан Тогда
		СотрудникиФормыРасширенный.ПрочитатьНаборЗаписей(ЭтаФорма, "НаградыФизическихЛиц");
		НаградыФизическихЛицПрочитан = Истина;
	КонецЕсли; 
	
	Если НЕ ТрудоваяДеятельностьФизическихЛицПрочитан Тогда
		СотрудникиФормыРасширенный.ПрочитатьНаборЗаписей(ЭтаФорма, "ТрудоваяДеятельностьФизическихЛиц");
		ТрудоваяДеятельностьФизическихЛицПрочитан = Истина;
	КонецЕсли; 
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная,ЧтениеДанныхДляНачисленияЗарплатыРасширенная") Тогда
		
		УстановитьПредставлениеПроцентаСевернойНадбавки();
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"НадписьПроцентСевернойНадбавки",
			"ГиперСсылка",
			Ложь);
			
	КонецЕсли;
	//Конец типового вызова
	
	Если НЕ ЮТР_СтажРаботыПоВидамВоздушныхСудовПрочитан Тогда
		
		СотрудникиФормыРасширенный.ПрочитатьНаборЗаписей(ЭтаФорма, "ЮТР_СтажРаботыПоВидамВоздушныхСудов");
		ЮТР_СтажРаботыПоВидамВоздушныхСудовПрочитан = Истина;
		Если ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
			ОтборСтрок  = Новый ФиксированнаяСтруктура(Новый Структура("Организация", ТекущаяОрганизация));
			Элементы.ЮТР_СтажРаботыПоВидамВоздушныхСудов.ОтборСтрок = ОтборСтрок;
		КонецЕсли; 
		СотрудникиФормыРасширенный.ПрочитатьНаборЗаписей(ЭтаФорма, "ЮТР_ВключениеПериодовТрудовойДеятельностиВСтаж");
	КонецЕсли; 
	
	СотрудникиФормыРасширенный.ПрочитатьНаборЗаписей(ЭтаФорма, "ЮТР_СтажСотрудниковОрганизаций");
	
	ЮТР_ПрочитатьДанныеОТрудовойДеятельности();
	
	ЮТР_УстановитьУсловноеОформление();
			
КонецПроцедуры // ПроинициализироватьФорму_ЮТ()

&НаКлиенте
Процедура ЮТР_СохранитьДанные(Отказ)

 	Если Модифицированность Тогда
		
		СтажиФизическихЛиц.Очистить();
		Для Каждого СтрокаСтажа Из СведенияОСтажах Цикл
			Если ЗначениеЗаполнено(СтрокаСтажа.ДатаОтсчета) Тогда
				НоваяСтрока							= СтажиФизическихЛиц.Добавить();
				НоваяСтрока.ФизическоеЛицо			= ФизическоеЛицоСсылка;
				Если СтрокаСтажа.УчитываетсяВРазрезеПриемовНаРаботу Тогда
					НоваяСтрока.ЮТР_Сотрудник	= СотрудникСсылка;
				КонецЕсли; 
				НоваяСтрока.ВидСтажа				= СтрокаСтажа.ВидСтажа;
				НоваяСтрока.ЮТР_ДатаОтсчета			= СтрокаСтажа.ДатаОтсчета;
				НоваяСтрока.ИсчисляетсяСДатыПриема	= СтрокаСтажа.ИсчисляетсяСДатыПриема;
				
				Если Не СтрокаСтажа.ИсчисляетсяСДатыПриема Тогда
				
					НоваяСтрока.ЮТР_РазмерМесяцев		= СтрокаСтажа.Лет * 12 + СтрокаСтажа.Месяцев;
					НоваяСтрока.ЮТР_РазмерДней			= СтрокаСтажа.Дней;
					
				КонецЕсли; 
				
			КонецЕсли;
		КонецЦикла;
		
		//Запись трудовой деятельности 
		ТрудоваяДеятельностьФизическихЛиц.Очистить();
		Для каждого СтрокаТаблицы Из ЮТР_ТрудоваяДеятельность Цикл
			
			Если СтрокаТаблицы.АвтоЗапись Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НоваяСтрока = ТрудоваяДеятельностьФизическихЛиц.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.ЮТР_ID						= СтрокаТаблицы.ID;
			
			НоваяСтрока.ЮТР_ДатаПротоколаКомиссии			= СтрокаТаблицы.ДатаПротоколаКомиссии;
			НоваяСтрока.ЮТР_НомерПротоколаКомиссии	= СтрокаТаблицы.НомерПротоколаКомиссии;
			
			НоваяСтрока.ФизическоеЛицо = ФизическоеЛицоСсылка;
			
		КонецЦикла; 
		
		//Запись включение периодов трудовой деятельности в стаж
		ЮТР_ВключениеПериодовТрудовойДеятельностиВСтаж.Очистить();
		Для каждого СтрокаТаблицы Из ЮТР_ВключениеПериодовВСтаж Цикл
			
			Если Не СтрокаТаблицы.Пометка Тогда
				
				Продолжить;
				
			КонецЕсли; 
			ЗаписьНабора = ЮТР_ВключениеПериодовТрудовойДеятельностиВСтаж.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, СтрокаТаблицы);
			ЗаписьНабора.ФизическоеЛицо = ФизическоеЛицоСсылка;
			
		КонецЦикла; 		
		
		Если Не Отказ Тогда
			
			Если ПроверитьЗаполнение() Тогда
				
				Возвращаемыйпараметр = Новый Структура;
				Возвращаемыйпараметр.Вставить("ИмяФормы", ИмяФормы);
				Возвращаемыйпараметр.Вставить("АдресВХранилище", АдресДанныхДополнительнойФормыНаСервере(СотрудникиКлиентСервер.ОписаниеДополнительнойФормы(ИмяФормы)));
				
				Оповестить(
					"ИзмененыДанныеДополнительнойФормы",
					Возвращаемыйпараметр,
					ВладелецФормы);
				
			Иначе
				Отказ = Истина;
			КонецЕсли;
				
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЮТР_СохранитьИЗакрытьНаКлиенте(ЗакрытьФорму = Истина) Экспорт

	Если НЕ ТолькоПросмотр Тогда
		ТекущийЭлемент = Элементы.ФормаОк;
	КонецЕсли; 
	
	Отказ = Ложь;

	ЮТР_СохранитьДанные(Отказ);
	
	Если НЕ Отказ  Тогда
		
		Модифицированность = Ложь;
		Если ЗакрытьФорму И Открыта() Тогда
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает таблицу трудовой деятельность по Ручным данным и кадровому документообороту.
&НаСервере
Процедура ЮТР_ПрочитатьДанныеОТрудовойДеятельности()

	Запрос = Новый Запрос;
	ЮТР_СписокВидовСтажей.Очистить();
				   
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыСтажа.Ссылка КАК ВидСтажа,
		|	ВидыСтажа.ЮТР_УчитываетсяВРазрезеПриемовНаРаботу КАК УчитываетсяВРазрезеПриемовНаРаботу
		|ИЗ
		|	(ВЫБРАТЬ
		|		ГруппыДоступаПользователя.ГруппаДоступа КАК ГруппаДоступа,
		|		ВидыСтажаЮТР_ГруппыНастроек.Ссылка КАК ВидШаблона,
		|		ВидыСтажаЮТР_ГруппыНастроек.Объект КАК Группа
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ГруппыДоступа.Ссылка КАК ГруппаДоступа,
		|			ГруппыДоступа.Ссылка.Наименование КАК Наименование,
		|			ГруппыДоступа.Ссылка.Профиль.Наименование КАК ПрофильНаименование
		|		ИЗ
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ГруппыДоступа.Ссылка КАК Ссылка
		|			ИЗ
		|				Справочник.ГруппыДоступа КАК ГруппыДоступа
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ПользователиГруппДоступа
		|					ПО (ПользователиГруппДоступа.Пользователь В
		|							(ВЫБРАТЬ
		|								&ТекущийПользователь))
		|						И ГруппыДоступа.Ссылка = ПользователиГруппДоступа.Ссылка
		|						И (НЕ ГруппыДоступа.ПометкаУдаления)
		|						И (НЕ ГруппыДоступа.Профиль.ПометкаУдаления)) КАК ГруппыДоступа) КАК ГруппыДоступаПользователя
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыСтажа.ЮТР_ГруппыНастроек КАК ВидыСтажаЮТР_ГруппыНастроек
		|			ПО (ВЫБОР
		|					КОГДА ГруппыДоступаПользователя.ГруппаДоступа = ЗНАЧЕНИЕ(Справочник.ГруппыДоступа.Администраторы)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ГруппыДоступаПользователя.ГруппаДоступа = ВидыСтажаЮТР_ГруппыНастроек.Объект
		|							ИЛИ &ТекущийПользователь = ВидыСтажаЮТР_ГруппыНастроек.Объект
		|				КОНЕЦ)) КАК ГруппыНастроек
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыСтажа КАК ВидыСтажа
		|		ПО (ВидыСтажа.Ссылка = ГруппыНастроек.ВидШаблона
		|				ИЛИ ГруппыНастроек.ГруппаДоступа = ЗНАЧЕНИЕ(Справочник.ГруппыДоступа.Администраторы))
		|ГДЕ
		|	НЕ ВидыСтажа.ПометкаУдаления";
		
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());

	ВыборкаДанных = Запрос.Выполнить().Выбрать();	
	Пока ВыборкаДанных.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ЮТР_СписокВидовСтажей.Добавить(), ВыборкаДанных);
	
	КонецЦикла;
	
	// Заполняем трудовую деятельность
	Для каждого СтрокаТаблицы Из ТрудоваяДеятельностьФизическихЛиц Цикл
		
		НоваяСтрока = ЮТР_ТрудоваяДеятельность.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	    НоваяСтрока.ID						= СтрокаТаблицы.ЮТР_ID ;
		НоваяСтрока.ДатаПротоколаКомиссии	= СтрокаТаблицы.ЮТР_ДатаПротоколаКомиссии;
		НоваяСтрока.НомерПротоколаКомиссии	= СтрокаТаблицы.ЮТР_НомерПротоколаКомиссии;

		
	КонецЦикла; 
	
	Запрос.Текст = "ВЫБРАТЬ
		|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.ФизическоеЛицо,
		|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.НомерПоПорядку,
		|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.Организация,
		|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.ДатаНачала,
		|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.ДатаОкончания,
		|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.Должность,
		|	ИСТИНА КАК АвтоЗапись,
		|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.ДокументОснование КАК ДокументОснование,
		|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.РазмерМесяцев,
		|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.РазмерДней
		|ИЗ
		|	РегистрСведений.ЮТР_ТрудоваяДеятельностьФизическихЛиц КАК ЮТР_ТрудоваяДеятельностьФизическихЛиц
		|ГДЕ
		|	ЮТР_ТрудоваяДеятельностьФизическихЛиц.ФизическоеЛицо = &ФизическоеЛицо";

	Запрос.УстановитьПараметр("ФизическоеЛицо", ЭтаФорма.ФизическоеЛицоСсылка); 
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
	
		НоваяСтрока = ЮТР_ТрудоваяДеятельность.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДанных);
	
	КонецЦикла;
	
	ЮТР_ВключениеПериодовВСтаж.Очистить();
	Для каждого СтрокаТаблицы Из ЮТР_ТрудоваяДеятельность Цикл
		
		ЮТР_ДобавитьВидыСтажейДляВключения(СтрокаТаблицы);
	
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из ЮТР_ВключениеПериодовТрудовойДеятельностиВСтаж Цикл
		
		МассивСтрок = ЮТР_ВключениеПериодовВСтаж.НайтиСтроки(Новый Структура("ID, ВидСтажа", СтрокаТаблицы.ID, СтрокаТаблицы.ВидСтажа));
		Если ЗначениеЗаполнено(МассивСтрок) > 0 Тогда
			МассивСтрок[0].Пометка = Истина;
		КонецЕсли;
		
	КонецЦикла; 
	
	Для Каждого СтрокаСтажа Из СтажиФизическихЛиц Цикл
		Если ЗначениеЗаполнено(СтрокаСтажа.ЮТР_ДатаОтсчета) Тогда
			
			Если ЮТР_СписокВидовСтажей.НайтиСтроки(Новый Структура("ВидСтажа", СтрокаСтажа.ВидСтажа)).Количество() > 0 Тогда
				
			НоваяСтрока	= СведенияОСтажах.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСтажа,,"ДатаОтсчета");
			НоваяСтрока.ДатаОтсчета		= СтрокаСтажа.ЮТР_ДатаОтсчета;
			НоваяСтрока.Лет				= Цел(СтрокаСтажа.ЮТР_РазмерМесяцев / 12);
			НоваяСтрока.Месяцев			= СтрокаСтажа.ЮТР_РазмерМесяцев - НоваяСтрока.Лет * 12;
			НоваяСтрока.Дней			= СтрокаСтажа.ЮТР_РазмерДней;
			
			КонецЕсли
		
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаОписанияСтажа Из ЮТР_СписокВидовСтажей Цикл
		
		МассивСтрок = СведенияОСтажах.НайтиСтроки(Новый Структура("ВидСтажа", СтрокаОписанияСтажа.ВидСтажа));
		Если МассивСтрок.Количество() > 0 Тогда
			
			Для каждого СтрокаСтажа Из МассивСтрок Цикл
				
				ЗаполнитьЗначенияСвойств(СтрокаСтажа, СтрокаОписанияСтажа);
				СформироватьПредставлениеСтажа(СтрокаСтажа, ТекущаяДатаСеанса());
				
			КонецЦикла; 
			
		Иначе
			
			СтрокаСтажа	= СведенияОСтажах.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСтажа, СтрокаОписанияСтажа);
			СформироватьПредставлениеСтажа(СтрокаСтажа, ТекущаяДатаСеанса());	
			
		КонецЕсли; 
	КонецЦикла;

	ЮТР_УстановитьОшибкуВводаТрудовойДейтельностиСервер();
	
КонецПроцедуры // ПрочитатьДанныеОТрудовойДеятельности()

//Обработка таблицы трудовой деятельности на сервере
&НаСервере
Процедура ЮТР_УстановитьОшибкуВводаТрудовойДейтельностиСервер()
	
	ЮТР_ТрудоваяДеятельность.Сортировать("ДатаНачала, НомерПоПорядку");
	КоличествоСтрокТаблицы = ЮТР_ТрудоваяДеятельность.Количество() - 1; 
	Для каждого СтрокаДляПроверки Из ЮТР_ТрудоваяДеятельность Цикл
		ИндексСтрок = ЮТР_ТрудоваяДеятельность.Индекс(СтрокаДляПроверки)+1;
		
		СтрокаДляПроверки.ЕстьОшибка = Ложь;
		
		Если СтрокаДляПроверки.АвтоЗапись Тогда
			Продолжить;
		КонецЕсли;
		
		Для сч = ИндексСтрок По КоличествоСтрокТаблицы Цикл
			
			СтрокаДляСравнения = ЮТР_ТрудоваяДеятельность.Получить(сч);
			
			Если СтрокаДляПроверки.Сотрудник = СтрокаДляСравнения.Сотрудник Тогда
				
				ДатаНачалаДляПроверки		= СтрокаДляПроверки.ДатаНачала;
				ДатаОкончанияДляПроверки	= ?(ЗначениеЗаполнено(СтрокаДляПроверки.ДатаОкончания), СтрокаДляПроверки.ДатаОкончания, Дата(3000,1,1));
				ДатаНачалаДляСравнения      = СтрокаДляСравнения.ДатаНачала;
				ДатаОкончанияДляСравнения	= ?(ЗначениеЗаполнено(СтрокаДляСравнения.ДатаОкончания), СтрокаДляСравнения.ДатаОкончания, Дата(3000,1,1));
				
				СтрокаДляПроверки.ЕстьОшибка = ДатаНачалаДляПроверки <= ДатаОкончанияДляСравнения И ДатаНачалаДляСравнения <= ДатаОкончанияДляПроверки ;
			
			КонецЕсли; 
			
			Если СтрокаДляПроверки.ЕстьОшибка Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЦикла;
	
	КонецЦикла; 

КонецПроцедуры

//Обработка таблицы трудовой деятельности на сервере
&НаКлиенте
Процедура ЮТР_УстановитьОшибкуВводаТрудовойДейтельностиКлиент()
	
	ЮТР_ТрудоваяДеятельность.Сортировать("ДатаНачала, НомерПоПорядку");
	КоличествоСтрокТаблицы = ЮТР_ТрудоваяДеятельность.Количество() - 1; 
	Для каждого СтрокаДляПроверки Из ЮТР_ТрудоваяДеятельность Цикл
		
		ИндексСтрок = ЮТР_ТрудоваяДеятельность.Индекс(СтрокаДляПроверки)+1;
		СтрокаДляПроверки.ЕстьОшибка = Ложь;
			
		Если СтрокаДляПроверки.АвтоЗапись Тогда
			Продолжить;
		КонецЕсли;

		Для сч = ИндексСтрок По КоличествоСтрокТаблицы Цикл
			
			СтрокаДляСравнения = ЮТР_ТрудоваяДеятельность.Получить(сч);
			
			Если СтрокаДляПроверки.Сотрудник = СтрокаДляСравнения.Сотрудник Тогда
				
				ДатаНачалаДляПроверки		= СтрокаДляПроверки.ДатаНачала;
				ДатаОкончанияДляПроверки	= ?(ЗначениеЗаполнено(СтрокаДляПроверки.ДатаОкончания), СтрокаДляПроверки.ДатаОкончания, Дата(3000,1,1));
				ДатаНачалаДляСравнения      = СтрокаДляСравнения.ДатаНачала;
				ДатаОкончанияДляСравнения	= ?(ЗначениеЗаполнено(СтрокаДляСравнения.ДатаОкончания), СтрокаДляСравнения.ДатаОкончания, Дата(3000,1,1));
				
				СтрокаДляПроверки.ЕстьОшибка = ДатаНачалаДляПроверки <= ДатаОкончанияДляСравнения И ДатаНачалаДляСравнения <= ДатаОкончанияДляПроверки ;
			
			КонецЕсли; 
			
			Если СтрокаДляПроверки.ЕстьОшибка Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЦикла;
	
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ЮТР_УстановитьВидимостьВключенияТрудовойДейтельностиВСтаж(ТекущаяСтрока)

	Если ТекущаяСтрока = Неопределено ИЛИ ТекущаяСтрока.АвтоЗапись Тогда
	
		Элементы.ЮТР_ВключениеПериодовВСтаж.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", "<Неопределеное значение>");
		
	Иначе
		
		Элементы.ЮТР_ВключениеПериодовВСтаж.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ТекущаяСтрока.ID);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЮТР_ДобавитьВидыСтажейДляВключения(ТекущаяСтрока)

	Если ТекущаяСтрока.АвтоЗапись Тогда
		
		Возврат;
		
	КонецЕсли; 	

	Если Не ЗначениеЗаполнено(ТекущаяСтрока.ID) Тогда
		ТекущаяСтрока.ID = Строка(Новый УникальныйИдентификатор);
	КонецЕсли; 
	
	МассивСтрок = ЮТР_ВключениеПериодовВСтаж.НайтиСтроки(Новый Структура("ID", ТекущаяСтрока.ID));
	Если Не ЗначениеЗаполнено(МассивСтрок) Тогда
		Для каждого ТекущийВидСтажа Из ЮТР_СписокВидовСтажей Цикл
			
			СтрокаТаблицы 					= ЮТР_ВключениеПериодовВСтаж.Добавить();
			СтрокаТаблицы.ФизическоеЛицо 	= ТекущаяСтрока.ФизическоеЛицо;
			СтрокаТаблицы.ID			 	= ТекущаяСтрока.ID;
			СтрокаТаблицы.ВидСтажа			= ТекущийВидСтажа.ВидСтажа;
		
		КонецЦикла; 
		
	КонецЕсли;

КонецПроцедуры

// Процедура - Заполнить реквизит формы типа таблицы значений
//	Создает колонки таблицы значений на основании переданного списка и имен и описания типов, 
//	а также создает визуальный объект для отображения таблицы значений на форме 
// Параметры:
//  ИмяВладельца				 - Строка - Имя реквизита формы для заполнения
//  ТекстЗапросаДляВыбораКолонок - Строка - Текст запроса для формирования имен и типов колонок
//
&НаСервере
Процедура ЮТР_ЗаполнитьРеквизитФормыТипаТаблицыЗначений(ИмяВладельца, ТекстЗапросаДляВыбораКолонок)

	Запрос			= Новый Запрос;
	Запрос.Текст	= ТекстЗапросаДляВыбораКолонок;
	СписокКолонок	= Запрос.Выполнить().Выгрузить().Колонки;
	
	МассивРеквизитов = Новый Массив;
	Для каждого ТекРеквизит Из СписокКолонок Цикл
		
		МассивТипов = Новый Массив;
		Для каждого ТекТип Из ТекРеквизит.ТипЗначения.Типы() Цикл
			Если ТекТип = Тип("Null") Тогда
				Продолжить;
			КонецЕсли; 
			МассивТипов.Добавить(ТекТип);
		КонецЦикла; 
		
		РеквизитФормы = Новый РеквизитФормы(ТекРеквизит.Имя, Новый ОписаниеТипов(МассивТипов), ИмяВладельца);
		МассивРеквизитов.Добавить(РеквизитФормы);
		
	КонецЦикла; 
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	ТаблицаРодитель = Элементы.Найти(ИмяВладельца);
	
	Для каждого ТекРеквизит Из МассивРеквизитов Цикл
		
		ПутьКДанным	 = ИмяВладельца + "." + ТекРеквизит.Имя;
		ИмяКолонки	 = ИмяВладельца + ТекРеквизит.Имя;
		ЭлементФормы = Элементы.Найти(ИмяКолонки);
		Если ЭлементФормы = Неопределено Тогда
			
			ЭлементФормы				= Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы") , ТаблицаРодитель);
			ЭлементФормы.ПутьКДанным	= ПутьКДанным;
			Если ТекРеквизит.ТипЗначения.СодержитТип(Тип("Булево")) Тогда
				
				ЭлементФормы.Вид			= ВидПоляФормы.ПолеФлажка;
				ЭлементФормы.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
				ЭлементФормы.Заголовок = " ";
			Иначе
				
				ЭлементФормы.Вид	   = ВидПоляФормы.ПолеВвода;
				ЭлементФормы.Заголовок = ЮТР_ОбщегоНазначения.ПолучитьПредставлениеИзИдентификатора(ТекРеквизит.Имя);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 	

КонецПроцедуры

#КонецОбласти